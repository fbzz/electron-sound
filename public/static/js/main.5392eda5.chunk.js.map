{"version":3,"sources":["RestaurantCard.js","RestaurantList.js","RestaurantPieChart.js","Home.js","Vote.js","App.js","serviceWorker.js","index.js"],"names":["Meta","Card","RestaurantCard","_ref","rest","onVoteClickHandler","react_default","a","createElement","col","card","hoverable","className","span","style","width","margin","cover","height","alt","src","url","actions","icon","type","onClick","title","name","description","RestaurantList","restaurants","map","index","row","justify","key","idx","id","COLORS","RestaurantPieChart","chartData","partials","item","value","votes","es6","window","outerWidth","outerHeight","data","dataKey","nameKey","cx","cy","innerRadius","outerRadius","fill","entry","i","length","verticalAlign","socket","openSocket","secure","Home","state","userName","voteResult","undefined","emitEmpty","_this","userNameInput","focus","setState","onChangeUserName","e","target","handleKeyPress","emit","renderInput","suffix","input","placeholder","prefix","color","size","onKeyPress","onChange","ref","node","_this2","this","on","console","log","_","chunk","Component","Vote","App","HashRouter","Switch","Route","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5392eda5.chunk.js","sourcesContent":["import React from \"react\";\nimport { Col, Card, Icon } from \"antd\";\nconst { Meta } = Card;\n\nexport default ({ rest, onVoteClickHandler }) => {\n  return (\n    <Col>\n      <Card\n        hoverable={true}\n        className=\"animated fadeIn\"\n        span={4}\n        style={{ width: 300, margin: 10 }}\n        cover={\n          <img\n            style={{ width: `100%`, height: `200px` }}\n            alt=\"restaurante\"\n            src={rest.url}\n          />\n        }\n        actions={[\n          <Icon type=\"check\" onClick={() => onVoteClickHandler(rest)} />\n        ]}\n      >\n        <Meta title={rest.name} description={rest.description} />\n      </Card>\n    </Col>\n  );\n};\n","import React from \"react\";\nimport { Row } from \"antd\";\nimport RestaurantCard from \"./RestaurantCard\";\n\nexport default ({ restaurants, onVoteClickHandler }) => {\n  return restaurants.map((restaurants, index) => {\n    return (\n      <Row type=\"flex\" justify=\"center\" key={index}>\n        {restaurants.map((rest, idx) => {\n          return (\n            <RestaurantCard\n              key={rest.id}\n              rest={rest}\n              onVoteClickHandler={onVoteClickHandler}\n            />\n          );\n        })}\n      </Row>\n    );\n  });\n};\n","import React from \"react\";\nimport { PieChart, Pie, Legend, Tooltip, Cell } from \"recharts\";\n\nconst COLORS = [\n  \"#0000FF\",\n  \"#000080\",\n  \"#FF00FF\",\n  \"#800080\",\n  \"#FF5733\",\n  \"#36FF33\",\n  \"#FF9C33\",\n  \"#F3FF33\",\n  \"#33B5FF\",\n  \"#33FFCA\",\n  \"#9633FF\",\n  \"#FF339F\"\n];\n\nexport default ({ partials }) => {\n  const chartData = partials.map(item => {\n    return { name: item.name, value: item.votes };\n  });\n\n  return (\n    <PieChart\n      width={window.outerWidth}\n      height={window.outerHeight}\n      className=\"animated fadeIn\"\n    >\n      <Pie\n        data={chartData}\n        dataKey=\"value\"\n        nameKey=\"name\"\n        cx={\"50%\"}\n        cy={\"20%\"}\n        innerRadius={60}\n        outerRadius={80}\n        fill=\"#8884d8\"\n      >\n        {chartData.map((entry, i) => (\n          <Cell key={i} fill={COLORS[i % COLORS.length]} />\n        ))}\n      </Pie>\n      <Tooltip />\n      <Legend verticalAlign=\"top\" height={150} />\n    </PieChart>\n  );\n};\n","import React, { Component } from \"react\";\nimport openSocket from \"socket.io-client\";\nimport { Row, Col, Icon, Input } from \"antd\";\nimport RestaurantList from \"./RestaurantList\";\nimport RestaurantPieChart from \"./RestaurantPieChart\";\nimport _ from \"lodash\";\nimport \"antd/dist/antd.css\";\nimport \"./animated.css\";\n//https://melhorhoradodia.herokuapp.com\nconst socket = openSocket(\"http://localhost:3000\", {\n  secure: true\n});\n\nclass Home extends Component {\n  state = {\n    userName: \"\",\n    restaurants: [],\n    voteResult: undefined\n  };\n\n  componentWillMount() {\n    socket.on(\"userJoined\", data => {\n      console.log(\"userJoined\", data);\n    });\n\n    socket.on(\"restaurant\", data => {\n      console.log(data);\n      this.setState({\n        restaurants: _.chunk(data, 3)\n      });\n    });\n\n    socket.on(\"userVoted\", data => {\n      console.log(data);\n      this.setState({ voteResult: data });\n    });\n\n    socket.on(\"userVotedRejected\", data => {\n      console.log(data);\n      this.setState({ voteResult: data });\n    });\n  }\n\n  emitEmpty = () => {\n    this.userNameInput.focus();\n    this.setState({ userName: \"\" });\n  };\n\n  onChangeUserName = e => {\n    this.setState({ userName: e.target.value });\n  };\n\n  handleKeyPress = e => {\n    if (e.key === \"Enter\") {\n      socket.emit(\"name\", this.state.userName);\n      this.setState({ userName: \"\" });\n    }\n  };\n\n  onVoteClickHandler = rest => {\n    socket.emit(\"vote\", rest);\n  };\n\n  renderInput = () => {\n    const { userName } = this.state;\n    const suffix = userName ? (\n      <Icon type=\"close-circle\" onClick={this.emitEmpty} />\n    ) : null;\n\n    return (\n      <Row type=\"flex\" justify=\"center\">\n        <Col span={4}>\n          <Input\n            placeholder=\"'Entri com seu nomi'\"\n            prefix={<Icon type=\"user\" style={{ color: \"rgba(0,0,0,.25)\" }} />}\n            suffix={suffix}\n            value={userName}\n            size=\"large\"\n            onKeyPress={this.handleKeyPress}\n            onChange={this.onChangeUserName}\n            ref={node => (this.userNameInput = node)}\n          />\n        </Col>\n      </Row>\n    );\n  };\n\n  render() {\n    if (this.state.restaurants.length === 0 && !this.state.voteResult)\n      return this.renderInput();\n\n    if (!this.state.voteResult)\n      return (\n        <RestaurantList\n          restaurants={this.state.restaurants}\n          onVoteClickHandler={this.onVoteClickHandler}\n        />\n      );\n\n    return <RestaurantPieChart partials={this.state.voteResult.partials} />;\n  }\n}\n\nexport default Home;\n","import React, { Component } from \"react\";\n\nclass Vote extends Component {\n  state = {};\n\n  render() {\n    return <div>Votacao</div>;\n  }\n}\n\nexport default Vote;\n","import React, { Component } from \"react\";\nimport Home from \"./Home\";\nimport Vote from \"./Vote\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\n\nclass App extends Component {\n  render() {\n    return (\n      <HashRouter>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/vote\" component={Vote} />\n        </Switch>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}